options:
  logging: 'CLOUD_LOGGING_ONLY'
steps:
  # 1) build docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/$REPO_NAME:$SHORT_SHA', '.']

  # 2) push image to Container Registry (images: below will be pushed by Cloud Build automatically
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/$REPO_NAME:$SHORT_SHA']

  # 3) deploy to Cloud Run, attach Cloud SQL instance and set DATABASE_URL using secret for DB password
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run deploy "${_SERVICE_NAME}" \
          --image "gcr.io/$PROJECT_ID/$REPO_NAME:$SHORT_SHA" \
          --region "${_REGION}" \
          --platform managed \
          --allow-unauthenticated \
          --add-cloudsql-instances="${_CLOUD_SQL_CONNECTION_NAME}" \
          --set-env-vars="DATABASE_URL=postgresql+pg8000://${_DB_USER}:${DB_PASS}@/${_DB_NAME}?host=/cloudsql/${_CLOUD_SQL_CONNECTION_NAME}" \
          --update-env-vars="CLOUD_SQL_CONNECTION_NAME=${_CLOUD_SQL_CONNECTION_NAME},DB_NAME=${_DB_NAME},DB_USER=${_DB_USER}"

# image metadata so Cloud Build pushes the image to the registry
images:
  - 'gcr.io/$PROJECT_ID/$REPO_NAME:$SHORT_SHA'

# allow injection of secret DB_PASS from Secret Manager into the build as env var DB_PASS
availableSecrets:
  secretManager:
    - versionName: 'projects/${PROJECT_ID}/secrets/DB_PASS/versions/latest'
      env: ['DB_PASS']

# substitutions to set when you trigger the build (or configure defaults in Cloud Build trigger)
substitutions:
  _REPO_NAME: 'bachelorjo2024back'
  _SERVICE_NAME: 'joback'
  _REGION: 'europe-west1'
  _CLOUD_SQL_CONNECTION_NAME: ''  # ex: project:region:instance â€” set in trigger or CI
  _DB_USER: ''                     # set in trigger or CI
  _DB_NAME: ''                     # set in trigger or CI

timeout: '1200s'